{"version":3,"sources":["Flux/AppActions.js","Calendar/Calendar.jsx","Flux/AppStore.js","TodoList/TodoList.jsx","FindBeer/FindBeer.jsx","BeerList/BeerList.jsx","App.js","serviceWorker.js","index.js"],"names":["iDispatcher","Dispatcher","register","console","log","AppActions","changeTodoListDay","value","dispatch","eventName","todoListDay","WEEKDAYS_NAMES","MONTH_NAMES","Calendar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createDayEl","renderDate","currentMonth","state","currentDay","holiday","getHoliday","className","getMonth","push","react_default","a","createElement","key","toString","join","onClick","clickByDay","getDate","clickByDayHandler","goPrevMonth","e","preventDefault","shiftMonth","goNextMonth","startYear","startMonth","startDay","Date","currentYear","getFullYear","year","month","firstDayInMonth","firstWeekDayInMonth","getDay","lastDayInMont","lastWeekDayInMont","endDay","result","setDate","daysList","holidays","find","_ref","day","shiftLength","setState","prevState","_this$state","getMonthDays","concat","map","weekName","React","Component","defaultPropps","AppStore","MicroEvent","payload","trigger","TodoList","storageChanges","getCurrentDayParams","changeTaskText","target","taskText","addTask","data","newData","toConsumableArray","id","toISOString","text","renderListElement","arguments","length","undefined","index","_data$text","_data$completed","completed","classNames","completeTask","deleteTask","objectSpread","dayObj","padStart","currentDayObj","currentDayKey","getDayKey","currentStorageKey","loadData","bind","unbind","prevProps","saveTask","JSON","parse","window","localStorage","ex","error","_this$state2","stringify","taskData","_this2","el","_this3","filter","_this$state3","hide","Button","bsStyle","onSubmit","onChange","type","FindBeer","beerName","changeInput","submitHandler","BeerList","beers","renderBeerItem","beer","name","getData","_callee","regenerator_default","wrap","_context","prev","next","abrupt","fetch","stop","response","json","HOLIDAYS","title","Content","selected","handleSelect","eventKey","setBeerName","Col","lg","sm","xs","src_FindBeer_FindBeer","BeerList_BeerList","Sidebar","children","App","changeTodoListDayInStore","hideTodoList","setHours","setMinutes","setSeconds","setMilliseconds","Grid","Row","App_Content","src_Calendar_Calendar","src_TodoList_TodoList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f9f8199.chunk.js","sourcesContent":["/* Классическая библиотека flux (https://facebook.github.io/flux/docs/overview.html)\n * предоставляет нам только Dispatcher, но нам больше ничего и не нужно\n */\nimport {Dispatcher} from 'flux';\n\nconst iDispatcher = new Dispatcher();\n\n//add logs\niDispatcher.register(console.log);\n\nexport default {\n    iDispatcher,\n    changeTodoListDay: function(value) {\n        iDispatcher.dispatch({\n            eventName: 'change-todo-list-day',\n            todoListDay: value\n        });\n    }\n};\n","import React from 'react';\n\n// import {Storage} from '../Flux/Storage';\n// import {MicroStorage} from '../Flux/Storage';\n\nimport AppActions from '../Flux/AppActions';\n\nimport './Calendar.css';\n\nexport const WEEKDAYS_NAMES = [\n    'пн',\n    'вт',\n    'ср',\n    'чт',\n    'пт',\n    'сб',\n    'вс'\n];\n\nexport const MONTH_NAMES = [\n    'Январь',\n    'Февраль',\n    'Март',\n    'Апрель',\n    'Май',\n    'Июнь',\n    'Июль',\n    'Август',\n    'Сентябрь',\n    'Октябрь',\n    'Ноябрь',\n    'Декабрь'\n];\n\nclass Calendar extends React.Component {\n    static defaultPropps = {\n        holidays: []\n    }\n\n    static getMonthDays( year, month ) {\n        const firstDayInMonth = new Date(year, month, 1),\n           firstWeekDayInMonth = (6 + firstDayInMonth.getDay())%7,\n           lastDayInMont = new Date(year, month + 1, 0),\n           lastWeekDayInMont = lastDayInMont.getDay() === 0\n              ? 6\n              : lastDayInMont.getDay() - 1,\n           startDay = new Date(year, month, 1 - firstWeekDayInMonth),\n           endDay = new Date(year, month + 1, 6 - lastWeekDayInMont),\n           result = [];\n\n        for(\n          var currentDay = new Date(startDay);\n          currentDay <= endDay;\n          currentDay.setDate(currentDay.getDate() + 1)\n        ) {\n          result.push( new Date(currentDay) );\n        }\n\n        return {\n          firstDayInMonth,\n          lastDayInMont,\n          firstWeekDayInMonth,\n          lastWeekDayInMont,\n          startDay,\n          endDay,\n          daysList: result\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        const {startYear, startMonth} = props,\n            startDay = new Date(startYear, startMonth, 1);\n\n        this.state = {\n            currentMonth: startDay.getMonth(),\n            currentYear: startDay.getFullYear()\n        };\n\n        // this.createDayElHandler = this.createDayEl.bind(this);\n    }\n\n    getHoliday(renderDate) {\n        const {holidays} = this.props;\n\n        return holidays.find(({day}) => +day === +renderDate);\n    }\n\n    createDayEl = renderDate => {\n        const {currentMonth} = this.state,\n            {currentDay} = this.props,\n            holiday = this.getHoliday(renderDate);\n        let className = [];\n\n        if (renderDate.getMonth() !== currentMonth) {\n            className.push('not-in-month');\n        }\n\n        if (holiday) {\n            className.push('holiday');\n        }\n\n        if (+currentDay === +renderDate) {\n            className.push('current-day');\n        }\n\n        return <li\n            key={renderDate.toString()}\n            className={className.join(' ')}\n            onClick={this.clickByDay(renderDate)}>\n          {renderDate.getDate()}\n        </li>;\n    }\n\n    // () => 5\n    // function() { return 5; }\n    // () => ({key: 5})\n    // function() { return {key: 5}; }\n    // () => {key: 5} // not valid\n    // function() { key: 5 } // not valid\n\n    clickByDay = renderDate => () => {\n        const {clickByDayHandler} = this.props;\n\n        if (clickByDayHandler) {\n            clickByDayHandler(renderDate);\n        } else {\n            // Storage.todoListDay = renderDate;\n            // Storage.changeTodoListDay(renderDate);\n            // MicroStorage.changeTodoListDay(renderDate);\n            AppActions.changeTodoListDay(renderDate);\n        }\n    }\n\n    goPrevMonth = e => {\n        e.preventDefault();\n\n        this.shiftMonth(-1);\n    }\n\n    goNextMonth = e => {\n        e.preventDefault();\n\n        this.shiftMonth(1);\n    }\n\n    shiftMonth(shiftLength) {\n        // const {currentYear, currentMonth} = this.state,\n        //     startDay = new Date(currentYear, currentMonth + shiftLength, 1);\n        //\n        // this.setState({\n        //     currentMonth: startDay.getMonth(),\n        //     currentYear: startDay.getFullYear()\n        // });\n\n        this.setState(prevState => {\n            const {currentYear, currentMonth} = prevState,\n                startDay = new Date(currentYear, currentMonth + shiftLength, 1);\n\n            return {\n                currentMonth: startDay.getMonth(),\n                currentYear: startDay.getFullYear()\n            };\n        });\n    }\n\n    render() {\n        const {currentMonth, currentYear} = this.state,\n            {daysList} = Calendar.getMonthDays(currentYear, currentMonth);\n\n        return <div className=\"calendar\">\n            <div className=\"calendar-controls\">\n                <button\n                    onClick={this.goPrevMonth}\n                    className=\"calendar__prev-month\">\n                    &lt;\n                </button>\n                <div className=\"calendar__title\">\n                    {`${MONTH_NAMES[currentMonth]} ${currentYear}`}\n                </div>\n                <button\n                    onClick={this.goNextMonth}\n                    className=\"calendar__next-month\">\n                    &gt;\n                </button>\n            </div>\n            <ul className=\"calendar-weekdays\">\n                {WEEKDAYS_NAMES.map(weekName => <li key={weekName}>{weekName}</li>)}\n            </ul>\n            <ul className=\"calendar-days\">\n                {daysList.map(this.createDayEl)}\n            </ul>\n        </div>;\n    }\n}\n\nexport default Calendar;\n","import AppActions from './AppActions';\nimport MicroEvent from 'microevent';\n\nconst AppStore = new MicroEvent();\n\n// AppStore.todoListDay = new Date();\n\n// add Dispatcher\nAppActions.iDispatcher.register(payload => {\n    switch (payload.eventName) {\n        case 'change-todo-list-day': {\n\n            AppStore.todoListDay = payload.todoListDay;\n            AppStore.trigger('change');\n\n            break;\n        }\n        default:\n            console.log('unknown event', {payload});\n            break;\n    }\n\n    return true;\n});\n\nexport default AppStore;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from 'react-bootstrap';\n\nimport './TodoList.css';\n\n// import {Storage} from '../Flux/Storage';\n// import {MicroStorage} from '../Flux/Storage';\n\nimport AppStore from '../Flux/AppStore';\n\nclass TodoList extends React.Component {\n    static propTypes = {\n        currentDay: PropTypes.instanceOf(Date)\n    }\n\n    static getDayKey( dayObj ) {\n      return [\n        dayObj.getFullYear(),\n        (dayObj.getMonth() + '1').padStart(2, '0'),\n        dayObj.getDate()\n      ].join('-');\n    }\n\n    static getCurrentDayParams(currentDay) {\n        const currentDayObj = new Date(currentDay),\n            currentDayKey = TodoList.getDayKey(currentDayObj),\n            currentStorageKey = `TODO_LIST_${currentDayKey}`;\n\n        return {\n            currentDayKey,\n            currentStorageKey\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.currentDay) {\n            return TodoList.getCurrentDayParams(props.currentDay);\n        }\n\n        return {};\n    }\n\n    constructor(props) {\n        super(props);\n\n        const {currentDay} = this.props;\n        // const {todoListDay} = Storage;\n        // const {todoListDay} = MicroStorage;\n        const {todoListDay} = AppStore;\n\n        this.state = {\n            currentDay: currentDay || todoListDay,\n            taskText: '',\n            data: []\n        };\n\n        if (!currentDay) {\n            this.state = {\n                ...this.state,\n                ...TodoList.getCurrentDayParams(todoListDay)\n            };\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n\n        if (!this.props.currentDay) {\n            // Storage.addEventListener('change', this.storageChanges);\n            // MicroStorage.bind('change', this.storageChanges);\n            AppStore.bind('change', this.storageChanges);\n        }\n    }\n\n    componentWillUnmount() {\n        if (!this.props.currentDay) {\n            // Storage.removeEventListener('change', this.storageChanges);\n            // MicroStorage.unbind('change', this.storageChanges);\n            AppStore.unbind('change', this.storageChanges);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.currentStorageKey !== this.state.currentStorageKey) {\n            this.loadData();\n        }\n\n        if (prevState.data !== this.state.data) {\n            this.saveTask();\n        }\n    }\n\n    loadData() {\n        const {currentStorageKey} = this.state;\n        let data = [];\n\n        try {\n            data = JSON.parse(window.localStorage[currentStorageKey] || '[]');\n        } catch (ex) {\n            console.error(`can't parse data for ${currentStorageKey}`);\n        }\n\n        this.setState({\n            data\n        });\n    }\n\n    storageChanges = () => {\n        // this.setState(TodoList.getCurrentDayParams(Storage.todoListDay));\n        // this.setState(TodoList.getCurrentDayParams(MicroStorage.todoListDay));\n        this.setState(TodoList.getCurrentDayParams(AppStore.todoListDay));\n    }\n\n    changeTaskText = e => {\n        const {value} = e.target;\n\n        this.setState({\n            taskText: value\n        });\n    }\n\n    addTask = e => {\n        e.preventDefault();\n\n        this.setState(prevState => {\n            const {taskText, data} = this.state,\n                newData = [...data];\n\n            newData.push({\n                id: new Date().toISOString(),\n                text: taskText\n            });\n\n            return {\n                taskText: '',\n                data: newData\n            }\n        });\n    }\n\n    saveTask() {\n        const {data, currentStorageKey} = this.state;\n\n        window.localStorage[currentStorageKey] = JSON.stringify(data);\n    }\n\n    completeTask(taskData) {\n        return () => {\n            this.setState(prevState => {\n                return {\n                    data: prevState.data.map(el => {\n                        if (el === taskData) {\n                            const newTask = {\n                                ...taskData,\n                                completed: !taskData.completed\n                            };\n\n                            return newTask;\n                        }\n\n                        return el;\n                    })\n                }\n            });\n        };\n    }\n\n    deleteTask(taskData) {\n        return () => {\n            this.setState(prevState => {\n                return {\n                    data: prevState.data.filter(el => el.id !== taskData.id)\n                }\n            });\n        };\n    }\n\n    renderListElement = (data = {}, index) => {\n        const {id, text = '', completed = false} = data,\n            classNames = ['todo__item'];\n\n        if (completed) {\n            classNames.push('todo__item--completed');\n        }\n\n        return <li\n            key={id || index}\n            className={classNames.join(' ')}>\n            <span onClick={this.completeTask(data)}>{text}</span>\n            <button onClick={this.deleteTask(data)}>Del</button>\n        </li>;\n    }\n\n    render() {\n        const {currentDayKey, data, taskText} = this.state,\n            {hide} = this.props;\n\n        return <div className=\"todo\">\n            <h3 className=\"todo__banner\">\n                {`TODO List ${currentDayKey}`}\n                {hide &&\n                    <Button\n                        bsStyle='danger'\n                        onClick={hide}>\n                        Hide\n                    </Button>}\n            </h3>\n            <ol className=\"todo__list\">\n                {data.map(this.renderListElement)}\n            </ol>\n            <form className=\"todo__form\" onSubmit={this.addTask}>\n                <input\n                    onChange={this.changeTaskText}\n                    className=\"todo__form-input\"\n                    type=\"text\"\n                    value={taskText}/>\n                <button className=\"todo__form-add\" type=\"submit\">Add</button>\n            </form>\n        </div>;\n    }\n}\n\nexport default TodoList;\n","import React from 'react';\n\nclass FindBeer extends React.Component {\n    state = {\n        beerName: ''\n    }\n\n    changeInput = e => {\n        const {value} = e.target;\n\n        this.setState({\n            beerName: value\n        });\n    }\n\n    submitHandler = e => {\n        e.preventDefault();\n        const {beerName} = this.state;\n\n        this.setState({\n            beerName: ''\n        }, () => {\n            if (this.props.submitHandler) {\n                this.props.submitHandler(beerName);\n            }\n        });\n    }\n\n    render() {\n        const {beerName} = this.state;\n\n        return <form onSubmit={this.submitHandler}>\n            <input\n                type='text'\n                value={beerName}\n                onChange={this.changeInput}/>\n            <button type='submit'>\n                Поиск \n            </button>\n        </form>\n    }\n}\n\nexport default FindBeer;\n","import React from 'react';\n\nexport default class BeerList extends React.Component {\n    state = {\n        beers: null\n    }\n\n    componentDidMount() {\n        this.loadData(this.props.beerName);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.beerName !== this.props.beerName) {\n            this.setState({\n                beers: null\n            }, () => this.loadData(this.props.beerName));\n        }\n    }\n\n    // loadData(beerName) {\n    //     if (beerName) {\n    //         fetch(`https://api.punkapi.com/v2/beers?beer_name=${beerName}`)\n    //             .then(response => response.json())\n    //             .then(beers => {\n    //                 if (this.props.beerName === beerName) {\n    //                     this.setState({beers, beerName});\n    //                 }\n    //             })\n    //             .catch(ex => console.error(ex));\n    //     }\n    // }\n\n    async loadData(beerName) {\n        async function getData(beerName) {\n            return fetch(`https://api.punkapi.com/v2/beers?beer_name=${beerName}`);\n        }\n\n        if (beerName) {\n            const response = await getData(beerName),\n                beers = await response.json();\n\n            if (this.props.beerName === beerName) {\n                this.setState({beers, beerName});\n            }\n        }\n    }\n\n    renderBeerItem = beer => {\n        return <li>\n            {beer.name};\n        </li>;\n    }\n\n    render() {\n        const {beers} = this.state,\n            {beerName} = this.props;\n\n        return <ul className='beer-list'>\n            {!beers &&\n                <li>\n                    {`loading beers for \"${beerName}\"`}\n                </li>}\n            {beers && beers.map(this.renderBeerItem)}\n        </ul>;\n    }\n}\n","import React, { Component } from 'react';\n\nimport Calendar from './Calendar/Calendar.jsx';\nimport TodoList from './TodoList/TodoList';\nimport FindBeer from './FindBeer/FindBeer';\nimport BeerList from './BeerList/BeerList';\n\nimport AppStore from './Flux/AppStore';\nimport AppActions from './Flux/AppActions';\n\nimport {Nav, NavItem, Grid, Row, Col} from 'react-bootstrap';\n\n// import logo from './logo.svg';\n\nimport './App.css';\n\nfunction getHolidays(fullYear) {\n    return [\n        {\n            day: new Date(2019, 0, 1),\n            title: 'Новый год'\n        },\n        {\n            day: new Date(2019, 0, 7),\n            title: 'Рождество Христово, православное'\n        },\n        {\n            day: new Date(2019, 2, 8),\n            title: 'Международный женский день'\n        },\n        {\n            day: new Date(2019, 3, 28),\n            title: 'Пасха'\n        },\n        {\n            day: new Date(2019, 4, 1),\n            title: 'День международной солидарности трудящихся'\n        }\n    ];\n}\n\nconst HOLIDAYS = getHolidays(2019);\n\nclass Content extends Component {\n    state = {\n        selected: 'home',\n        beerName: ''\n    }\n\n    handleSelect = eventKey => {\n        this.setState({\n            selected: eventKey\n        });\n    }\n\n    setBeerName = beerName => this.setState({beerName})\n\n    render() {\n        const {selected, beerName} = this.state;\n\n        return <Col lg={8} sm={6} xs={12} className='content-body'>\n        {/*  <Nav bsStyle=\"pills\" activeKey={selected} onSelect={this.handleSelect}>\n            <NavItem eventKey='home' title='home'>\n          NavItem home content\n          </NavItem>\n        <NavItem eventKey='item' title=\"Item\">\n        NavItem Item content\n          </NavItem>\n            <NavItem eventKey='3' title='Item 3'>\n              NavItem 3 content\n            </NavItem>\n          </Nav>\n*/}\n          <h2>\n          Поиск пива по названию\n          </h2>\n\n            <FindBeer submitHandler={this.setBeerName}/>\n            {beerName && <BeerList beerName={beerName}/>}\n        </Col>;\n    }\n}\n\nfunction Sidebar(props) {\n    return <Col lg={4} sm={6} xs={12} className='component-aside'>\n        {props.children}\n    </Col>;\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const currentDay = new Date();\n\n        currentDay.setHours(0);\n        currentDay.setMinutes(0);\n        currentDay.setSeconds(0);\n        currentDay.setMilliseconds(0);\n\n        this.state = {\n            currentDay,\n            currentMonth: currentDay.getMonth(),\n            currentYear: currentDay.getFullYear()\n        };\n    }\n\n    componentDidMount() {\n        AppStore.bind('change', this.changeTodoListDayInStore);\n    }\n\n    componentWillUnmount() {\n        AppStore.unbind('change', this.changeTodoListDayInStore);\n    }\n\n    changeTodoListDayInStore = () => {\n        this.setState({\n            todoListDay: AppStore.todoListDay\n        });\n    }\n\n    hideTodoList = () => {\n        AppActions.changeTodoListDay(null);\n    }\n\n    // changeTodoListDay = day => {\n    //     this.setState({\n    //         todoListDay: day\n    //     });\n    // }\n\n    render() {\n        const {\n            currentMonth,\n            currentYear,\n            currentDay,\n            todoListDay\n        } = this.state;\n\n        return <Grid>\n            <Row>\n                <Content/>\n                <Sidebar>\n                    <Calendar\n                        holidays={HOLIDAYS}\n                        currentDay={currentDay}\n                        startMonth={currentMonth}\n                        startYear={currentYear}/>\n                </Sidebar>\n            </Row>\n            {todoListDay && <TodoList hide={this.hideTodoList}/>}\n        </Grid>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('content'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}